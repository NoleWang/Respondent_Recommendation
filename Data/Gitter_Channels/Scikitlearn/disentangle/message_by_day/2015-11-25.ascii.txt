[17:59] <564789be16b6c7089cbab8b7> I am wondering if I have misunderstood https://github.com/scikit-learn/scikit-learn/issues/5870#issuecomment-159511717 .  Is the question if isnan() is fast in C ?
[18:08] <53135b495e986b0712efc453> The thing is NaN in IEEE std has two possible representations (qNaN, which is the quiet NaN where we explicitly specify values to be NaN and sNaN where NaN is a signal NaN and is a (possibly unexpected) result of  numeric computation, like in Gael's comment...) So Gael was wondering if that would make `is_nan` computation in python/cython less efficient... Your pandas point was correct in that pandas does use a consistent NaN representation for both q/sNaN (atleast that is what I understood from that link), whereas numpy doesn't have one... I think it won't really affect the speed... but I am not sure... I am currently working on benchmarking that...
[18:14] <564789be16b6c7089cbab8b7> @rvraghav93 interesting! In C you really just have to do x!=x which is true iff x = NaN. This is exactly one comparison
[18:16] <564789be16b6c7089cbab8b7> @rvraghav93  I also looked at the assembly that you get from isnan() from gcc which is quite interesting too :)
[18:18] <53135b495e986b0712efc453> Could you share?
[18:19] <564789be16b6c7089cbab8b7> @rvraghav93  sure.. using math.h,  isnan() compiles to  jmp __isnanf  .  However return x != x compiles to xor eax, eax ucomiss xmm0, xmm0 setp    al ret
[18:25] <564789be16b6c7089cbab8b7> @rvraghav93  however it turns out gcc had a performance bug and bleeding edge isnan()  compiles to something closer to the latter assembly.. Does this make sense?
[18:33] <53135b495e986b0712efc453> I am not sure if the latter x!=x will work in all compilers... but that is the most effective way to check for nan AFAIK... In general, IIRC `ucomiss` will handle the nan(s) effectively (i.e not distinguish between multiple nan representations)
[19:05] <564789be16b6c7089cbab8b7> @rvraghav93  I think you are right C99 mandates the use of a macro for this.  x!=x certainly works in gcc however and I assume all sensible compilers
[19:07] <564789be16b6c7089cbab8b7> @rvraghav93  if you are interesting.. this was the gcc performance bug https://sourceware.org/bugzilla/show_bug.cgi?id=17441 . Fixed on 2015-09-18
[19:34] <564789be16b6c7089cbab8b7> @rvraghav93  I looked it up.. it seems any C99 compliant C compiler is guaranteed to do x!=x correctly That is x!=x iff x is NaN
[19:38] <564789be16b6c7089cbab8b7> @rvraghav93  it is specified in http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=525&zoom=auto,-193,767 section F.9.3 Relational operators
[19:43] <564789be16b6c7089cbab8b7> but in any case...isnan() is much easier to read and gcc will compile it properly soon :) (I don't really understand the math.h versus cmath.h point in any case)
