[16:38] <553d32d715522ed4b3df8b92> Hi , First of all, wish you all a happy new year. I am new to scikit learn. I wanted to ask for help in working on issues which I have the ability to contribute. The issue regarding [meta-estimators](https://github.com/scikit-learn/scikit-learn/issues/5824) seemed nice thing to work on. Please let you know about your thoughts. I would be happy to work any other issue if this is beyond my scope. Thanks :)
--------------------------------------------------------------------------------------------------
[16:40] <53135b495e986b0712efc453> Could you ping @hugobowne and ask him if he's still working on it? If not please feel free to take it up.
[16:43] <553d32d715522ed4b3df8b92> Thank you so much. Will do that.
--------------------------------------------------------------------------------------------------
[16:54] <553d32d715522ed4b3df8b92> It would also help if some idea can be given regarding how to proceed. Sorry for my doubts on trivial issues, but I am new to the API. AFAIK, I see that the multi class classifiers are right now implemented to turn a binary classifier into a multiclass classifier. This issue is intended to implement meta estimators to turn binary classifiers to multioutput classifiers. Are multi output classifiers same as the multioutput-multiclass classifiers like dt, rf ? And also let me know if it is better to ask the doubts in here or do it at some other place ?
--------------------------------------------------------------------------------------------------
[21:21] <53135b495e986b0712efc453> The outline of what needs to be done here is -   * Make `n_outputs` numbers of single output estimators * Train using `X (n_samples x n_features)`, `y (n_samples x n_outputs)` * Predict using `X(n_samples x n_features)` * For `output_i` in `range(n_outputs)` --> `y_predicted_i = estimator_i`, where `y_predicted_i` is of shape `(n_samples x 1)` * Vertically stack all the `y_predicted_i` -s to get the final `y_predicted` of shape `(n_samples x n_outputs)`
[21:23] <53135b495e986b0712efc453> and as far are `multioutput.py` is concerned, it should provide a meta estimator that changes single/multiclass single output to single/multiclass multioutput...
[21:27] <53135b495e986b0712efc453> So essentially if you want binary_single_output_estimator to be made a multiclass multioutput you should be able to do both -  * `OVOClassifier(estimator=MultiOutputEstimator(estimator=binary_single_output_estimator))` * `MultiOutputEstimator(estimator=OVOClassifier(estimator=binary_single_output_estimator))`
[21:28] <53135b495e986b0712efc453> You could add a test making sure both of them return the same predictions
[21:32] <53135b495e986b0712efc453> I copied this to the issue so @mblondel or anyone else can correct me if I am wrong.
[21:33] <53135b495e986b0712efc453> Also, I am unable to edit, we require it to be horizontally stacked, not vertically
--------------------------------------------------------------------------------------------------
