[01:32] <5977a991d73408ce4f6ebde7> hello, I'm wondering if anyone has ever used ElasticNet with both a `sample_weight` argument and a precomputed gram matrix before. I'm trying a simple experiment to run a fit with and without the gram matrix passed in and they end up with different coefficients. I'm using the default setting of 'cyclic' for the coordinate descent so there shouldn't be any randomness.  without gram: ``` en = ElasticNet(alpha=0.001) en.fit(X, y, sample_weight=swgt) ```  with gram: ``` # pre-center data to avoid warning about gram matrix being tossed away # when data is centered in _pre_fit X_cent = X - np.average(X, axis=0, weights=swgt) gram_mat = X_cent.T @ X_cent  en_gram = ElasticNet(alpha=0.001, precompute=gram_mat) en_gram.fit(X_cent, y, sample_weight=swgt) ```  am I doing something dumb here?
--------------------------------------------------------------------------------------------------
[10:56] <541a528b163965c9bc2053de> maybe this is related to data normalization but I am not sure. Could you please open and issue with a full minimal reproducer (e.g. using data generated on the fly with `numpy.random` for instance?
--------------------------------------------------------------------------------------------------
[14:19] <5977a991d73408ce4f6ebde7> Will do.
--------------------------------------------------------------------------------------------------
[18:17] <541a528b163965c9bc2053de> Please help test scikit-learn 0.24.0rc1 and help us spread the news: https://twitter.com/scikit_learn/status/1334562221498753026
--------------------------------------------------------------------------------------------------
