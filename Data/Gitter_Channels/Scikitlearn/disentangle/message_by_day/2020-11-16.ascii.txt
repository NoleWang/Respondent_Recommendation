[13:06] <5f2fbda7d73408ce4febbf62> Hi! I want to ask here before bothering people on GitHub: Is there a reason for the submoduled import structure of sklearn? I often find myself importing only to have to search for the submodule name of a thing I already know. For example, I might need "PCA", but I won't remember that it is under "decomposition". Is it worth having each collection of functions and classes under their own module? Granted, there are many submodules, each containing many more things to import, but surely maintaining a list of imports at the top level of sklearn wouldn't be too big of a hurdle, so that `from sklearn import PCA` would be possible. It would be a huge usability boost in my humble opinion. But I might also be dumb. Am I missing something obvious here? Cheers!
[13:11] <567f5d7716b6c7089cc043a8> I'm not a big fan of heavy import statements, and having all those classes and functions as a top level import would make "import sklearn" very very heavy (since it would load every user-facing API immediately). Also, sometimes there may be conflicts between modules. Other than that, I find the code more readable and understandable when  imports are from the sub-modules instead of a top level import.
[13:15] <5f2fbda7d73408ce4febbf62> Oh that's true! I don't really have a grasp on the full scope of sklearn, so I can imagine the import could be huge. I'm quite satisfied with this being the main explanation. Thanks a bunch!
