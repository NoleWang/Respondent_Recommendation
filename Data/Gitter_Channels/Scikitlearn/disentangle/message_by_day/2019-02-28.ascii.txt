[21:16] <5c70487dd73408ce4fb8a95a> @troykirin a minimal example copypasta would be helpful to get us started; usually its as simple as you described `apply(lambda x: func(x))` assuming all records in the loop are independent
[22:15] <5c6af6cad73408ce4fb82b1c> @tylerkontra-system1 this is the loop im trying to work with ```  for pair in combinations(np_array_movieandratings[:,],2):     x1 = pair[0]     x2 = pair[1]     np.append.(cos_sim(x1,x2) ``` 
[23:57] <5c70487dd73408ce4fb8a95a> it might make more sense to do something like this ``` import numpy as np from itertools import combinations  def my_func(p):     return np.sum(p) my_array = np.array(range(100)) my_combin = np.array(tuple(combinations(my_array, 2))) my_result = [my_func(pair) for pair in my_combin] ``` since the biggest performance boost is likely to be from simply using numpys data structures (re: https://stackoverflow.com/questions/38709313/numpy-vectorize-multidimensional-function)
