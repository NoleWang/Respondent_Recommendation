[00:01] <5977a991d73408ce4f6ebde7> regarding my earlier question, i managed to figure it out, a bit tricky but makes sense after closely reading through some of the preprocessing code in _base.py. See example below, perhaps it could be adapted in to a unit test?  ``` from sklearn.linear_model import ElasticNet from sklearn.datasets import make_regression from numpy.testing import assert_almost_equal import numpy as np  X, y = make_regression(n_samples=int(1e5), noise=0.5)  # random lognormal weight vector. weights = np.random.lognormal(size=y.shape)  en = ElasticNet(alpha=0.01, fit_intercept=True, normalize=False, precompute=False) en.fit(X, y, sample_weight=weights)  X_c = (X - np.average(X, axis=0, weights=weights)) # row wise multiply X_r = X_c * np.sqrt(weights)[:, np.newaxis]  en_precompute = ElasticNet(alpha=0.01, fit_intercept=True, normalize=False, precompute=X_r.T@X_r) en_precompute.fit(X_c, y, sample_weight=weights)  assert_almost_equal(en.coef_, en_precompute.coef_) ```
