[21:28] <5d5565e0d73408ce4fc880d5>  Hello all (I am new to Cython),  I am currently working on adding an augmented version of Brieman's forest-RC (similar to RandomForest) algorithm into my fork of scikit-learn: In short, the algorithm takes linear combinations of features and projects them with weights randomly selected in {-1,1} to form a new feature to split on. The number of features combined at each split is a random variable.    The current `SplitRecord` only holds one feature, I need something to store a vector of features and a vector to hold weights.   1. I tried initializing an np.ndarray and using memoryviews, but ran into GIL issues. 1. I tried to make an `ObliqueSplitRecord` class, but that can't be passed as a pointer into functions because it is a Python object. 1. I tried to augment the `SplitRecord` struct in [_splitter.pxd](https://github.com/scikit-learn/scikit-learn/blob/a47e914163c2dbecb4a80ec40d2d8fe313a83010/sklearn/tree/_splitter.pxd#L23-L32) but that didn't seem to work because vectors would then be of fixed length. 1. I tried to use something similar to the [`tree/_utils:Stack`](https://github.com/scikit-learn/scikit-learn/blob/3046990e76c7c90a1150c26770572c8d76ee00de/sklearn/tree/_utils.pyx#L81-L157) but fell into the same problem as it was a class and couldn't be passed as a pointer into a function.  I am looking into using cppclass, but am not sure if that will fix solve my problem.   Does anyone have suggestions on how to best implement this in a Cythonic way?  i.e. storing a vector of things while avoiding the GIL and not using python objects? 
